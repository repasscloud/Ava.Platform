@namespace Ava.WebApp.Components.Dialogs
@using LeafletForBlazor
@using Ava.Shared.Models.Results.Flights
@inject IIataLookupService IataLookupService

<MudMessageBox @ref="_mudMessageBox"
               Title="@Title"
               Style="max-height: 90vh; overflow-y: auto;">
    <MessageContent>
        @if (FlightResult?.ItineraryGroup is not null)
        {
            int flightIndex = 1;
            foreach (var itinerary in FlightResult.ItineraryGroup)
            {
                foreach (var segment in itinerary.SegmentGroup)
                {
                    <MudPaper Class="pa-3 mb-4" Elevation="2">
                        <MudText Typo="Typo.subtitle1" Class="mb-2">
                            Flight @flightIndex: @segment.Departure?.IataCode â†’ @segment.Arrival?.IataCode
                        </MudText>

                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudText Typo="Typo.caption">Carrier:</MudText>
                                <MudText>@segment.CarrierCode @segment.Number</MudText>

                                <MudText Typo="Typo.caption">Operated By:</MudText>
                                <MudText>@segment.OperatingCarrierCode</MudText>

                                <MudText Typo="Typo.caption">Aircraft:</MudText>
                                <MudText>@segment.Aircraft</MudText>

                                <MudText Typo="Typo.caption">Cabin Class:</MudText>
                                <MudText>@segment.CabinClass</MudText>

                                <MudText Typo="Typo.caption">Departure:</MudText>
                                <MudText>@segment.Departure?.IataCode - Terminal @segment.Departure?.Terminal</MudText>
                                <MudText>@segment.Departure?.At.ToLocalTime().ToString("ddd, dd MMM yyyy HH:mm")</MudText>

                                <MudText Typo="Typo.caption">Arrival:</MudText>
                                <MudText>@segment.Arrival?.IataCode - Terminal @segment.Arrival?.Terminal</MudText>
                                <MudText>@segment.Arrival?.At.ToLocalTime().ToString("ddd, dd MMM yyyy HH:mm")</MudText>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                @if (_mapParams.TryGetValue(segment.Departure?.IataCode ?? string.Empty, out var param))
                                {
                                    <RealTimeMap height="250px" width="100%" Parameters="@param" />
                                }
                                else
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Warning">Map unavailable for @segment.Departure?.IataCode</MudText>
                                }
                            </MudItem>
                        </MudGrid>
                    </MudPaper>

                    flightIndex++;
                }
            }

            <MudDivider Class="my-3" />

            <MudText Typo="Typo.subtitle1">Pricing Summary</MudText>
            <MudText Typo="Typo.body2">Total Price: @FlightResult.GrandTotal.ToString("C") (@FlightResult.CurrencyCode)</MudText>
        }
        else
        {
            <MudText Typo="Typo.body2" Color="Color.Error">
                No flight info available.
            </MudText>
        }
    </MessageContent>

    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Done">
            OK
        </MudButton>
    </YesButton>
</MudMessageBox>

@code {
    private MudMessageBox? _mudMessageBox;
    private readonly Dictionary<string, RealTimeMap.LoadParameters> _mapParams = new();

    [Parameter] public string Title { get; set; } = "Booking Info";
    [Parameter] public FlightResultV1? FlightResult { get; set; }

    public async Task ShowAsync()
    {
        _mapParams.Clear();

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            CloseButton = true,
            BackdropClick = false,
        };

        if (FlightResult?.ItineraryGroup is not null)
        {
            foreach (var seg in FlightResult.ItineraryGroup.SelectMany(i => i.SegmentGroup))
            {
                var iata = seg.Departure?.IataCode;
                if (!string.IsNullOrWhiteSpace(iata) && !_mapParams.ContainsKey(iata))
                {
                    var lat = await IataLookupService.GetLatitudeAsync(iata);
                    var lon = await IataLookupService.GetLongitudeAsync(iata);

                    _mapParams[iata] = new RealTimeMap.LoadParameters
                    {
                        location = new RealTimeMap.Location
                        {
                            latitude = lat ?? 0.0,
                            longitude = lon ?? 0.0
                        },
                        zoomLevel = 12
                    };
                }
            }
        }

        await _mudMessageBox!.ShowAsync(options);
    }
} 
