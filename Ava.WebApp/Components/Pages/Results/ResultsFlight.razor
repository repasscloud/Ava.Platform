@page "/Legacy/Results/Flight/{cacheKey?}"

@inject IStorageService StorageService
@inject IGithubCDNService GithubCDNService

@if (_isCacheKeyLoaded)
{
    <MudCard class="mb-3">
        
        @if (_flightResultsV1 is not null && _flightResultsV1.Count > 0)
        {
            for (int i = 0; i < _flightResultsV1.Count; i++)
            {
                var flightOffer = _flightResultsV1[i];
                int itin0 = 0; // only the first itinerary for each result

                var itineraryDuration = flightOffer.ItineraryGroup[itin0].TravelTime;  // store the duration of an itinerary

                <MudCardContent>
                    <MudGrid align-left>
                        <!-- #region Visible on medium and larger screens -->
                        <MudHidden Breakpoint="Breakpoint.SmAndDown">

                            <!-- iterate over each segment in and itinerary -->
                            @for (int j = 0; j < flightOffer.ItineraryGroup[itin0].SegmentGroup.Count; j++)
                            {
                                var segment = flightOffer.ItineraryGroup[itin0].SegmentGroup[j];  // obtain the segment info here
                            
                                <!-- Airline Logo -->
                                <MudItem sm="1">
                                    <MudImage Src=@($"{flightOffer.ItineraryGroup[itin0].SegmentGroup[0].OperatingCarrierCode.ToAirlineImageUrl()}") 
                                        Width="90" 
                                        Height="90" 
                                        Style="border-radius: 4px; max-width: 100%;" />
                                </MudItem>
                            }

                            <!-- Flight Times & Route -->
                            <MudItem sm="6">
                                <MudText Typo="Typo.body1">
                                    <b>
                                        @($"{flightOffer.ItineraryGroup[0].SegmentGroup[0].Departure.At:h:mmtt}".ToLower()) → 
                                        @($"{flightOffer.ItineraryGroup[0].SegmentGroup[0].Arrival.At:h:mmtt}".ToLower())
                                    </b>
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    @($"{flightOffer.ItineraryGroup[0].SegmentGroup[0].Departure.IataCode}") → @($"{flightOffer.ItineraryGroup[0].SegmentGroup[0].Arrival.IataCode}") @($"{flightOffer.ItineraryGroup[0].SegmentGroup[0].OperatingCarrierCode}{flightOffer.ItineraryGroup[0].SegmentGroup[0].Number}")
                                </MudText>

                                @if (flightOffer.TotalNumberOfSegments > 1)
                                {
                                    <MudText Typo="Typo.body1">
                                        <b>
                                            @($"{flightOffer.ItineraryGroup[0].SegmentGroup[1].Departure.At:h:mmtt}".ToLower()) → 
                                            @($"{flightOffer.ItineraryGroup[0].SegmentGroup[1].Arrival.At:h:mmtt}".ToLower()) @($"{flightOffer.ItineraryGroup[0].SegmentGroup[0].OperatingCarrierCode}{flightOffer.ItineraryGroup[0].SegmentGroup[0].Number}")
                                        </b>
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        @($"{flightOffer.ItineraryGroup[0].SegmentGroup[0].OperatingCarrierCode}{flightOffer.ItineraryGroup[0].SegmentGroup[0].Number}")
                                    </MudText>
                                }
                                <MudText Typo="Typo.body2">
                                    <MudIcon Icon="@Icons.Material.Filled.FlightTakeoff" />
                                    &nbsp;@($"{flightOffer.ItineraryGroup[0].SegmentGroup[0].OperatingCarrierCode}{flightOffer.ItineraryGroup[0].SegmentGroup[0].Number}")
                                </MudText>
                                <MudText Typo="Typo.body2">@($"{flightOffer.ItineraryGroup[0].SegmentGroup[0].Aircraft}")</MudText>
                                @* <div style="position: relative; display: inline-block;">
                                    <!-- Base Icon (Meal Service) -->
                                    <MudIcon Icon="@Icons.Material.Filled.Restaurant" Size="Size.Small"/>

                                    <!-- Overlay Icon (Dollar Sign) in Bottom Right -->
                                    <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="Size.Small" Color="Color.Error"
                                            Style="position: absolute; bottom: 1px; right: -4px; background-color: white; border-radius: 50%; padding: 0.5px; font-size: 0.8em;" />
                                </div>
                                <div style="position: relative; display: inline-block;">
                                    <!-- Base Icon (Meal Service) -->
                                    <MudIcon Icon="@Icons.Material.Filled.Fastfood" Size="Size.Small"/>
                                </div> *@

                                @if (flightOffer?.ItineraryGroup != null &&
                                    flightOffer.ItineraryGroup.Count > 0 &&
                                    flightOffer.ItineraryGroup[0].SegmentGroup != null &&
                                    flightOffer.ItineraryGroup[0].SegmentGroup.Count > 0 &&
                                    flightOffer.ItineraryGroup[0].SegmentGroup[0].AmenityGroup != null &&
                                    flightOffer.ItineraryGroup[0].SegmentGroup[0].AmenityGroup?.Count > 0)
                                {
                                    List<AmenityV1> amenities = flightOffer.ItineraryGroup[0].SegmentGroup[0].AmenityGroup!;

                                    <div style="display: flex; gap: 4px; flex-wrap: wrap;">
                                        @foreach (var amenity in amenities)
                                        {
                                            <MudTooltip Text="@amenity.Description">
                                                <div style="position: relative;">
                                                    @* Base icon based on description *@
                                                    @if (!string.IsNullOrWhiteSpace(amenity.Description))
                                                    {
                                                        <MudIcon Icon="@GetAmenityIcon(amenity.Description)" Size="Size.Small" />

                                                        @if (amenity.IsChargeable)
                                                        {
                                                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney"
                                                                Size="Size.Small"
                                                                Color="Color.Error"
                                                                Style="position: absolute; bottom: 1px; right: -4px; background-color: white; border-radius: 50%; padding: 0.5px; font-size: 0.8em;" />
                                                        }
                                                    }
                                                </div>
                                            </MudTooltip>
                                        }
                                    </div>
                                }
                            </MudItem>
                            

                            <!-- Total Travel Time & Layovers -->
                            <MudItem sm="3" Style="display: flex; flex-direction: column; align-items: center; justify-content: flex-start; gap: 4px;">
                                <!-- Flex container to align the time and chip horizontally -->
                                <div Style="display: flex; align-items: center; gap: 8px;">
                                    <MudText 
                                        Typo="Typo.body1"
                                        Style="margin: 0;">
                                            <b>@($"{flightOffer.TotalTravelTime.Hours}")H @($"{flightOffer.TotalTravelTime.Minutes}")M</b>
                                    </MudText>

                                    @if (flightOffer.TotalNumberOfSegments == 1)
                                    {
                                        <MudChip T="string" Color="Color.Success" Style="margin: 0; padding: 2px 8px;">Direct Flight</MudChip>
                                    }
                                    else if (flightOffer.TotalNumberOfSegments == 2)
                                    {
                                        <MudChip T="string" Color="Color.Warning" Style="margin: 0; padding: 2px 8px;">1 stop</MudChip>
                                    }
                                    else if (flightOffer.TotalNumberOfSegments > 2)
                                    {
                                        <MudChip T="string" Color="Color.Error" Style="margin: 0; padding: 2px 8px;">@(flightOffer.TotalNumberOfSegments) stops</MudChip>
                                    }
                                    else
                                    {
                                        <MudChip T="string" Color="Color.Error" Style="margin: 0; padding: 2px 8px;">@(flightOffer.TotalNumberOfSegments) stops</MudChip>
                                    }
                                </div>

                                <!-- Additional text under the time + chip -->
                                @if (flightOffer.TotalNumberOfSegments > 1)
                                {
                                    <!-- layover logic here -->
                                }
                                <MudText Typo="Typo.caption" Class="text-muted">Layover details go here</MudText>
                            </MudItem>


                            <!-- Price -->
                            <MudItem sm="2" Style="text-align: right;">
                                <MudText Typo="Typo.h6"
                                    fontweight="FontWeight.Bold">
                                    @($"{flightOffer.CurrencyCode.ToCurrencySymbol()}{flightOffer.GrandTotal:N2}")
                                </MudText>
                                @* <MudText Typo="Typo.h6" fontweight="FontWeight.Bold">AU$394</MudText> *@
                            </MudItem>
                        </MudHidden>
                        <!-- #endregion -->

                        <!-- #region  Visible on small screens only -->
                        <MudHidden Breakpoint="Breakpoint.MdAndUp">
                            <MudItem xs="2">
                                <MudImage Src="https://images.trvl-media.com/media/content/expus/graphics/static_content/fusion/v0.1b/images/airlines/vector/s/JQ_sq.svg" 
                                        Width="50" 
                                        Height="50"
                                        Style="border-radius: 4px; max-width: 100%;" />
                            </MudItem>
    
                            <!-- Flight Time & Route -->
                            <MudItem xs="7">
                                <MudText Typo="Typo.body1"><b>12:12pm → 4:10pm</b></MudText>
                                <MudText Typo="Typo.body2">Brisbane (BNE) → Perth (PER)</MudText>
                            </MudItem>

                            <!-- Price -->
                            <MudItem xs="3" Style="text-align: right;">
                                <MudText Typo="Typo.h6" fontweight="FontWeight.Bold">AU$394</MudText>
                            </MudItem>
                        </MudHidden>
                        <!-- #endregion -->
                    </MudGrid>
                    
                    <MudCardActions>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="HandleBookClick" Class="me-2">
                            Book Now
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="HandleBookClick" Class="me-2">
                            Request
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="HandleBookClick" Class="me-2">
                            Info
                        </MudButton>
                    </MudCardActions>
                </MudCardContent>
            }
        }
        else
        {
            <b>No Flights found</b>
        }
    </MudCard>
}

@code {
    [Parameter] public string? cacheKey { get; set; }

    private bool _isCacheKeyLoaded = false;
    private AmadeusFlightOfferSearchResult? _storedResults;
    private List<FlightOffer>? _flightOffers;

    private List<FlightResultV1>? _flightResultsV1;  // this is used to hold all the data for the for (int i=0) iteration to display results


    // json debug indenting
    private JsonSerializerOptions options = new JsonSerializerOptions
    {
        WriteIndented = true // optional, for nicely formatted JSON
    };

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(cacheKey))
        {
            _storedResults = await StorageService.GetAmadeusFlightOfferSearchResultAsync(cacheKey);
            await Task.Delay(1000);
            if (_storedResults is not null)
            {
                _isCacheKeyLoaded = true;
                _flightOffers = _storedResults.Data;

                // update the _flightResultsV1 list
                _flightResultsV1 ??= new List<FlightResultV1>();
                var data = _flightOffers!.ToList();
                for (int i = 0; i < data.Count; i++)
                {
                    var flightOffer = data[i];

                    FlightResultV1 flightResultV1 = flightOffer.ToFlightResultV1();

                    _flightResultsV1.Add(flightResultV1);
                }
            }
        }
    }


    private string GetAmenityIcon(string description)
    {
        return description.ToUpperInvariant() switch
        {
            "175 PCT  QMILES ACCUMULATION" => Icons.Material.Filled.TrendingUp,
            "1PC MAX 15LB 7KG 115LCM" => Icons.Material.Filled.WorkOutline,
            "1PC MAX 23KG 158LCM EACH" => Icons.Material.Filled.WorkOutline,
            "200 PCT  QMILES ACCUMULATION" => Icons.Material.Filled.TrendingUp,
            "3000 EXTRA MILES" => Icons.Material.Filled.Add,
            "50 PCT QMILES ACCUMULATION" => Icons.Material.Filled.TrendingFlat,
            "50KG BAGGAGE ALLOWANCE" => Icons.Material.Filled.Luggage,
            "70 PERCENT MILES EARNED" => Icons.Material.Filled.TrendingFlat,
            "75 PCT  QMILES ACCUMULATION" => Icons.Material.Filled.TrendingUp,
            "ALCOHOLIC DRINK" => Icons.Material.Filled.WineBar,
            "BAG INCLUDED" => Icons.Material.Filled.Work,
            "BEVERAGE" => Icons.Material.Filled.LocalCafe,
            "BID TO UPGRADE" => Icons.Material.Filled.Upgrade,
            "CABIN BAG 1 PIECE 7 KG" => Icons.Material.Filled.Cabin,
            "CARRY ON BAGGAGE" => Icons.Material.Filled.Cases,
            "CHANGE AFTER DEPARTURE" => Icons.Material.Filled.EditCalendar,
            "CHANGE BEFORE DEPARTURE" => Icons.Material.Filled.EditCalendar,
            "CHANGEABLE TICKET" => Icons.Material.Filled.ChangeCircle,
            "CHECKED BAG 1 PC 23 KG EACH" => Icons.Material.Filled.Work,
            "CHECKED BAG 2 PCS 23 KG EACH" => Icons.Material.Filled.Work,
            "CHECKED BAG 2 PCS 32 KG EACH" => Icons.Material.Filled.Work,
            "CHECKED BAG FIRST" => Icons.Material.Filled.Luggage,
            "CHECKED BAG SECOND" => Icons.Material.Filled.Luggage,
            "COMPLIMENTARY BEVERAGES" => Icons.Material.Filled.LocalCafe,
            "DEDICATED CHECK IN" => Icons.Material.Filled.AssignmentInd,
            "EXCESS BAGGAGE" => Icons.Material.Filled.WorkOff,
            "EXCESS WEIGHT SPECIAL CHARGE" => Icons.Material.Filled.Scale,
            "FAST TRACK" => Icons.Material.Filled.Speed,
            "FAST TRACK IF AVAILABLE" => Icons.Material.Filled.Speed,
            "FOOD AND BEVERAGE" => Icons.Material.Filled.Restaurant,
            "FREE CHECKED BAGGAGE ALLOWANCE" => Icons.Material.Filled.CheckCircle,
            "FRONT SEAT SELECTION" => Icons.Material.Filled.EventSeat,
            "MEAL" => Icons.Material.Filled.Restaurant,
            "MEAL AND BEVERAGE" => Icons.Material.Filled.LocalDining,
            "MEAL BEVERAGE" => Icons.Material.Filled.LocalDining,
            "MEAL OR SNACK" => Icons.Material.Filled.RestaurantMenu,
            "MEAL SERVICE" => Icons.Material.Filled.RoomService,
            "MEAL SERVICES" => Icons.Material.Filled.RoomService,
            "MEAL VOUCHER" => Icons.Material.Filled.ReceiptLong,
            "MILEAGE ACCRUAL" => Icons.Material.Filled.Loyalty,
            "NO SHOW FEE" => Icons.Material.Filled.Block,
            "NON ALCOHOLIC DRINK" => Icons.Material.Filled.LocalDrink,
            "ONLINE MESSAGE RIGHT" => Icons.Material.Filled.MarkChatRead,
            "PRE PAID BAGGAGE" => Icons.Material.Filled.AttachMoney,
            "PRE RESERVED SEAT ASSIGNMENT" => Icons.Material.Filled.EventSeat,
            "PRE SEAT ASSIGNMENT" => Icons.Material.Filled.EventSeat,
            "PREMIUM CHECK IN" => Icons.Material.Filled.Star,
            "PREMIUM SEAT" => Icons.Material.Filled.AirlineSeatReclineExtra,
            "PRIORITY ACCESS" => Icons.Material.Filled.FlightTakeoff,
            "PRIORITY BAGGAGE" => Icons.Material.Filled.LocalShipping,
            "PRIORITY BOARDING" => Icons.Material.Filled.DirectionsWalk,
            "PRIORITY CHECK IN" => Icons.Material.Filled.Login,
            "PRIORITY CHKIN AT CERTAIN PORT" => Icons.Material.Filled.Login,
            "PRIORITY SECURITY" => Icons.Material.Filled.VerifiedUser,
            "QR LOUNGE ACCESS OS" => Icons.Material.Filled.MeetingRoom,
            "REFUND AFTER DEPARTURE" => Icons.Material.Filled.MoneyOff,
            "REFUND BEFORE DEPARTURE" => Icons.Material.Filled.MoneyOffCsred,
            "REFUNDABLE TICKET" => Icons.Material.Filled.Receipt,
            "SEAT ASSIGNMENT" => Icons.Material.Filled.EventSeat,
            "SEAT SELECTION" => Icons.Material.Filled.EventSeat,
            "SNACK" => Icons.Material.Filled.Fastfood,
            "STANDARD SEAT" => Icons.Material.Filled.EventSeat,
            "STANDARD SEAT SELECTION" => Icons.Material.Filled.EventSeat,
            "UPGRADE" => Icons.Material.Filled.Upgrade,
            "UPGRADE ELIGIBILITY" => Icons.Material.Filled.CheckCircleOutline,
            _ => Icons.Material.Filled.Info
        };
    }






    // junk below here

    private void HandleBookClick()
    {
        Console.WriteLine("Book button clicked!");
    }
}


@*
See in the segments, there is an Id per segment? (this has been truncated for reference):

"segments": [
    {
        "id": "17",


That "id" is used further down here:
"travelerPricings": [
    {
        "travelerId": "1",
        "fareOption": "STANDARD",
        "travelerType": "ADULT",
        "price": {
            "currency": "AUD",
            "total": "313.98",
            "base": "257.95"
        },
        "fareDetailsBySegment": [
            {
                "segmentId": "17",
                "cabin": "ECONOMY",
                "fareBasis": "UZCH0",
                "brandedFare": "CH",
                "brandedFareLabel": "CHOICE",
                "class": "U",
                "includedCheckedBags": {
                    "quantity": 1
                },
                "amenities": [

The "amenities" list is found down in travelerPricings.fareDetailsBySegment, then you need to find the record with the segmentId that matches the segments.Id from earlier, then check if it has the section .amenities (it should have, but it might not? That's why 'public List<AmenityV1>? AmenityGroup { get; set; }' is optiona!)

And if it exists, that is how the amentitiesGroup must be populated!
*@