@page "/Dev3/Results/Flight/{cacheKey?}"

@inject IStorageService StorageService
@inject IGithubCDNService GithubCDNService
@inject IDialogService DialogService

@if (_isCacheKeyLoaded)
{
    <MudGrid Class="pa-2">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">

            <MudItem xs="12">
                <MudGrid>
                    <!-- Filter Sidebar (sticky) -->
                    <MudItem sm="3">
                        <div style="position: sticky; top: 16px;">
                            <MudPaper Class="pa-4">
                                <!-- Filter UI -->
                                <b>Filter panel coming soon...</b>
                            </MudPaper>
                        </div>
                    </MudItem>

                    <!-- Flight Results -->
                    <MudItem sm="9">
                        @if (_flightResultsV1 is not null && _flightResultsV1.Count > 0)
                        {
                            for (int i = 0; i < _flightResultsV1.Count; i++)
                            {
                                var flightOffer = _flightResultsV1[i];
                                int itin0 = 0;

                                var currentItineraryGroup = flightOffer.ItineraryGroup[itin0];
                                var itineraryDuration = flightOffer.ItineraryGroup[itin0].TravelTime;
                                var numberOfBookableSeats = flightOffer.NumberOfBookableSeats;

                                <div style="border: 1px solid rgba(0,0,0,0.12); border-radius: 8px; padding: 16px; margin-bottom: 12px;">
                                    <MudGrid>
                                        <!-- Column A -->
                                        <MudItem sm="5">
                                            @for (int j = 0; j < flightOffer.ItineraryGroup[itin0].SegmentGroup.Count; j++)
                                            {
                                                var segment = flightOffer.ItineraryGroup[itin0].SegmentGroup[j];

                                                <MudGrid Class="mb-2">
                                                    <MudItem xs="3" Class="d-flex align-center justify-center">
                                                        <MudImage Src="@segment.OperatingCarrierCode.ToAirlineImageUrl()"
                                                                  Width="90" Height="90"
                                                                  Style="border-radius: 4px;" />
                                                    </MudItem>

                                                    <MudItem xs="4">
                                                        <MudGrid Spacing="0">
                                                            <MudItem xs="12">
                                                                <MudText Typo="Typo.body1" Align="Align.Left">
                                                                    @FlightRouteRenderer.BuildRouteLine(segment.Departure.IataCode, new string[] { }, segment.Arrival.IataCode)
                                                                </MudText>
                                                            </MudItem>
                                                            <MudItem xs="12">
                                                                <MudText Typo="Typo.body2" Align="Align.Left">
                                                                    @($"{segment.Departure.At:h:mm tt}".ToLower()) → @($"{segment.Arrival.At:h:mm tt}".ToLower())
                                                                </MudText>
                                                            </MudItem>
                                                            <MudItem xs="12">
                                                                <MudText Typo="Typo.body2" Align="Align.Left">
                                                                    @segment.OperatingCarrierCode@segment.Number
                                                                </MudText>
                                                            </MudItem>
                                                            <MudItem xs="12">
                                                                <MudText Typo="Typo.caption" Align="Align.Left">@segment.Aircraft</MudText>
                                                                
                                                                @if (segment.AmenityGroup != null &&
                                                                    segment.AmenityGroup?.Count > 0)
                                                                {
                                                                    List<AmenityV1> amenities = segment.AmenityGroup;

                                                                    <div style="display: flex; gap: 4px; flex-wrap: wrap;">
                                                                        @foreach (var amenity in amenities)
                                                                        {
                                                                            <MudTooltip Text="@amenity.Description">
                                                                                <div style="position: relative;">
                                                                                    @* Base icon based on description *@
                                                                                    @if (!string.IsNullOrWhiteSpace(amenity.Description))
                                                                                    {
                                                                                        <MudIcon Icon="@GetAmenityIcon(amenity.Description)" Size="Size.Small" />

                                                                                        @if (amenity.IsChargeable)
                                                                                        {
                                                                                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney"
                                                                                                Size="Size.Small"
                                                                                                Color="Color.Error"
                                                                                                Style="position: absolute; bottom: 1px; right: -4px; background-color: white; border-radius: 50%; padding: 0.5px; font-size: 0.8em;" />
                                                                                        }
                                                                                    }
                                                                                </div>
                                                                            </MudTooltip>
                                                                        }
                                                                    </div>
                                                                }
                                                            </MudItem>
                                                        </MudGrid>
                                                    </MudItem>
                                                </MudGrid>
                                            }
                                        </MudItem>

                                        <!-- Column B -->
                                        <MudItem sm="5" Style="display: flex; flex-direction: column; align-items: center; justify-content: flex-start; gap: 4px;">
                                            <!-- Flex container to align the time and chip horizontally -->
                                            <div Style="display: flex; align-items: center; gap: 8px;">
                                                <MudText 
                                                    Typo="Typo.body1"
                                                    Style="margin: 0;">
                                                        <b>@($"{flightOffer.TotalTravelTime.Hours}")H @($"{flightOffer.TotalTravelTime.Minutes}")M</b>
                                                </MudText>

                                                @if (flightOffer.TotalNumberOfSegments == 1)
                                                {
                                                    <MudChip T="string" Color="Color.Success" Style="margin: 0; padding: 2px 8px;">Direct Flight</MudChip>
                                                }
                                                else if (flightOffer.TotalNumberOfSegments == 2)
                                                {
                                                    <MudChip T="string" Color="Color.Warning" Style="margin: 0; padding: 2px 8px;">1 stop</MudChip>
                                                }
                                                else if (flightOffer.TotalNumberOfSegments > 2)
                                                {
                                                    <MudChip T="string" Color="Color.Error" Style="margin: 0; padding: 2px 8px;">@(flightOffer.TotalNumberOfSegments) stops</MudChip>
                                                }
                                                else
                                                {
                                                    <MudChip T="string" Color="Color.Error" Style="margin: 0; padding: 2px 8px;">@(flightOffer.TotalNumberOfSegments) stops</MudChip>
                                                }
                                            </div>

                                            <!-- Additional text under the time + chip -->
                                            @if (flightOffer.TotalNumberOfSegments > 1)
                                            {
                                                <!-- layover logic here -->
                                            }
                                            <MudText Typo="Typo.caption" Class="text-muted">@numberOfBookableSeats seats available to book</MudText>

                                            <!-- If layover not form same airport, make note here! -->
                                            @if (flightOffer.ItineraryGroup[itin0].SegmentGroup.Count > 1)
                                            {
                                                for (int ig = 0; ig < flightOffer.ItineraryGroup[itin0].SegmentGroup.Count - 1; ig++)
                                                {
                                                    var currentSegment = flightOffer.ItineraryGroup[itin0].SegmentGroup[ig];
                                                    var nextSegment = flightOffer.ItineraryGroup[itin0].SegmentGroup[ig + 1];

                                                    if (!string.Equals(currentSegment.Arrival.IataCode, nextSegment.Departure.IataCode, StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        @* this is part of issue 48 *@
                                                        @* <MudText Typo="Typo.caption" Class="text-muted">
                                                            @($"⚠️: Arrives at {currentSegment.Arrival.IataCode} but next departs from {nextSegment.Departure.IataCode}")
                                                        </MudText>

                                                        <MudText Typo="Typo.caption" Color="Color.Warning">
                                                            ⚠️: Arrives at @currentSegment.Arrival.IataCode but next departs from @nextSegment.Departure.IataCode
                                                        </MudText>
                                                        
                                                        <MudAlert Severity="Severity.Warning" Dense="true" Elevation="0">
                                                            Arrives at @currentSegment.Arrival.IataCode but next departs from @nextSegment.Departure.IataCode
                                                        </MudAlert>
                                                        
                                                        <MudChip T="string" Color="Color.Warning" Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.Warning">
                                                            Arrives at @currentSegment.Arrival.IataCode but next departs from @nextSegment.Departure.IataCode
                                                        </MudChip> *@
                                                        
                                                        <MudText Typo="Typo.subtitle2" Color="Color.Error">
                                                            ⚠️ Arrives at @currentSegment.Arrival.IataCode but next departs from @nextSegment.Departure.IataCode
                                                        </MudText>
                                                    }
                                                }
                                            }
                                        </MudItem>
                                        
                                        <!-- Column C -->
                                        <MudItem sm="2">
                                            <MudGrid>
                                                <MudItem xs="12">
                                                    <MudText Typo="Typo.h6" Align="Align.Right" Class="me-2">
                                                        <b>@($"{flightOffer.CurrencyCode.ToCurrencySymbol()}{flightOffer.GrandTotal:N2}")</b>
                                                    </MudText>
                                                </MudItem>
                                                <MudItem xs="12" Class="d-flex justify-end">
                                                    <MudButton Variant="Variant.Outlined"
                                                        Color="Color.Success"
                                                        Size="Size.Small"
                                                        Class="me-2">
                                                            Book
                                                    </MudButton>
                                                    <MudButton Variant="Variant.Outlined"
                                                        Color="Color.Dark"
                                                        Size="Size.Small"
                                                        Class="me-2"
                                                        OnClick="@(() => ShowBookingInfo("Flight QR123 departs at 18:30"))">
                                                            Info
                                                    </MudButton>
                                                </MudItem>
                                            </MudGrid>
                                        </MudItem>

                                    </MudGrid>
                                </div>
                            }
                        }
                        else
                        {
                            <b>No Flights found</b>
                        }
                    </MudItem>
                </MudGrid>
            </MudItem>

        </MudHidden>
    </MudGrid>
}

<MudMessageBox @ref="_mudMessageBox"
               Title="Booking Info">
    <MessageContent>
        @if (!string.IsNullOrEmpty(BookingInfo))
        {
            <MudText Typo="Typo.body1">@BookingInfo</MudText>
        }
        else
        {
            <MudText Typo="Typo.body2" Color="Color.Error">No booking info available.</MudText>
        }
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Success"
                   StartIcon="@Icons.Material.Filled.Done">
            OK
        </MudButton>
    </YesButton>
</MudMessageBox>


@code {
    [Parameter] public string? cacheKey { get; set; }

    private bool _isCacheKeyLoaded = false;
    private AmadeusFlightOfferSearchResult? _storedResults;
    private List<FlightOffer>? _flightOffers;

    private List<FlightResultV1>? _flightResultsV1;

    private JsonSerializerOptions options = new JsonSerializerOptions
    {
        WriteIndented = true
    };

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(cacheKey))
        {
            _storedResults = await StorageService.GetAmadeusFlightOfferSearchResultAsync(cacheKey);
            await Task.Delay(1000);
            if (_storedResults is not null)
            {
                _isCacheKeyLoaded = true;
                _flightOffers = _storedResults.Data;

                _flightResultsV1 ??= new List<FlightResultV1>();
                var data = _flightOffers!.ToList();
                for (int i = 0; i < data.Count; i++)
                {
                    var flightOffer = data[i];
                    FlightResultV1 flightResultV1 = flightOffer.ToFlightResultV1();
                    _flightResultsV1.Add(flightResultV1);
                }
            }
        }
    }

    private string GetAmenityIcon(string description)
    {
        return description.ToUpperInvariant() switch
        {
            "175 PCT  QMILES ACCUMULATION" => Icons.Material.Filled.TrendingUp,
            "1PC MAX 15LB 7KG 115LCM" => Icons.Material.Filled.WorkOutline,
            "1PC MAX 23KG 158LCM EACH" => Icons.Material.Filled.WorkOutline,
            "200 PCT  QMILES ACCUMULATION" => Icons.Material.Filled.TrendingUp,
            "3000 EXTRA MILES" => Icons.Material.Filled.Add,
            "50 PCT QMILES ACCUMULATION" => Icons.Material.Filled.TrendingFlat,
            "50KG BAGGAGE ALLOWANCE" => Icons.Material.Filled.Luggage,
            "70 PERCENT MILES EARNED" => Icons.Material.Filled.TrendingFlat,
            "75 PCT  QMILES ACCUMULATION" => Icons.Material.Filled.TrendingUp,
            "ALCOHOLIC DRINK" => Icons.Material.Filled.WineBar,
            "BAG INCLUDED" => Icons.Material.Filled.Work,
            "BEVERAGE" => Icons.Material.Filled.LocalCafe,
            "BID TO UPGRADE" => Icons.Material.Filled.Upgrade,
            "CABIN BAG 1 PIECE 7 KG" => Icons.Material.Filled.Cabin,
            "CARRY ON BAGGAGE" => Icons.Material.Filled.Cases,
            "CHANGE AFTER DEPARTURE" => Icons.Material.Filled.EditCalendar,
            "CHANGE BEFORE DEPARTURE" => Icons.Material.Filled.EditCalendar,
            "CHANGEABLE TICKET" => Icons.Material.Filled.ChangeCircle,
            "CHECKED BAG 1 PC 23 KG EACH" => Icons.Material.Filled.Work,
            "CHECKED BAG 2 PCS 23 KG EACH" => Icons.Material.Filled.Work,
            "CHECKED BAG 2 PCS 32 KG EACH" => Icons.Material.Filled.Work,
            "CHECKED BAG FIRST" => Icons.Material.Filled.Luggage,
            "CHECKED BAG SECOND" => Icons.Material.Filled.Luggage,
            "COMPLIMENTARY BEVERAGES" => Icons.Material.Filled.LocalCafe,
            "DEDICATED CHECK IN" => Icons.Material.Filled.AssignmentInd,
            "EXCESS BAGGAGE" => Icons.Material.Filled.WorkOff,
            "EXCESS WEIGHT SPECIAL CHARGE" => Icons.Material.Filled.Scale,
            "FAST TRACK" => Icons.Material.Filled.Speed,
            "FAST TRACK IF AVAILABLE" => Icons.Material.Filled.Speed,
            "FOOD AND BEVERAGE" => Icons.Material.Filled.Restaurant,
            "FREE CHECKED BAGGAGE ALLOWANCE" => Icons.Material.Filled.CheckCircle,
            "FRONT SEAT SELECTION" => Icons.Material.Filled.EventSeat,
            "MEAL" => Icons.Material.Filled.Restaurant,
            "MEAL AND BEVERAGE" => Icons.Material.Filled.LocalDining,
            "MEAL BEVERAGE" => Icons.Material.Filled.LocalDining,
            "MEAL OR SNACK" => Icons.Material.Filled.RestaurantMenu,
            "MEAL SERVICE" => Icons.Material.Filled.RoomService,
            "MEAL SERVICES" => Icons.Material.Filled.RoomService,
            "MEAL VOUCHER" => Icons.Material.Filled.ReceiptLong,
            "MILEAGE ACCRUAL" => Icons.Material.Filled.Loyalty,
            "NO SHOW FEE" => Icons.Material.Filled.Block,
            "NON ALCOHOLIC DRINK" => Icons.Material.Filled.LocalDrink,
            "ONLINE MESSAGE RIGHT" => Icons.Material.Filled.MarkChatRead,
            "PRE PAID BAGGAGE" => Icons.Material.Filled.AttachMoney,
            "PRE RESERVED SEAT ASSIGNMENT" => Icons.Material.Filled.EventSeat,
            "PRE SEAT ASSIGNMENT" => Icons.Material.Filled.EventSeat,
            "PREMIUM CHECK IN" => Icons.Material.Filled.Star,
            "PREMIUM SEAT" => Icons.Material.Filled.AirlineSeatReclineExtra,
            "PRIORITY ACCESS" => Icons.Material.Filled.FlightTakeoff,
            "PRIORITY BAGGAGE" => Icons.Material.Filled.LocalShipping,
            "PRIORITY BOARDING" => Icons.Material.Filled.DirectionsWalk,
            "PRIORITY CHECK IN" => Icons.Material.Filled.Login,
            "PRIORITY CHKIN AT CERTAIN PORT" => Icons.Material.Filled.Login,
            "PRIORITY SECURITY" => Icons.Material.Filled.VerifiedUser,
            "QR LOUNGE ACCESS OS" => Icons.Material.Filled.MeetingRoom,
            "REFUND AFTER DEPARTURE" => Icons.Material.Filled.MoneyOff,
            "REFUND BEFORE DEPARTURE" => Icons.Material.Filled.MoneyOffCsred,
            "REFUNDABLE TICKET" => Icons.Material.Filled.Receipt,
            "SEAT ASSIGNMENT" => Icons.Material.Filled.EventSeat,
            "SEAT SELECTION" => Icons.Material.Filled.EventSeat,
            "SNACK" => Icons.Material.Filled.Fastfood,
            "STANDARD SEAT" => Icons.Material.Filled.EventSeat,
            "STANDARD SEAT SELECTION" => Icons.Material.Filled.EventSeat,
            "UPGRADE" => Icons.Material.Filled.Upgrade,
            "UPGRADE ELIGIBILITY" => Icons.Material.Filled.CheckCircleOutline,
            _ => Icons.Material.Filled.Info
        };
    }


    // mudblazor dialog box for flight info
    private MudMessageBox? _mudMessageBox;
    private string BookingInfo = string.Empty;

    private async Task ShowBookingInfo(string info)
    {
        BookingInfo = info;

        var result = await _mudMessageBox!.ShowAsync();

        if (result == true)
        {
            Console.WriteLine("User confirmed booking info.");
        }
    }

    private void HandleBookClick()
    {
        Console.WriteLine("Book button clicked!");
    }
}
